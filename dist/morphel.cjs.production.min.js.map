{"version":3,"file":"morphel.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import morphdom from 'morphdom';\n\nexport interface MorphOptions {\n  childrenOnly?: boolean;\n  getNodeKey?: (node: Node) => any;\n  onBeforeElChildrenUpdated?: (\n    fromEl: HTMLElement,\n    toEl: HTMLElement\n  ) => boolean;\n  onBeforeElUpdated?: (fromEl: HTMLElement, toEl: HTMLElement) => boolean;\n  onBeforeNodeAdded?: (node: Node) => Node;\n  onBeforeNodeDiscarded?: (node: Node) => boolean;\n  onElUpdated?: (el: HTMLElement) => void;\n  onNodeAdded?: (node: Node) => Node;\n  onNodeDiscarded?: (node: Node) => void;\n}\n\nexport default class Morphel<T extends Element = Element> {\n  readonly element: T;\n\n  originalHTML?: string;\n\n  get el() {\n    return this.element;\n  }\n\n  constructor(element: T) {\n    this.element = element;\n    this.originalHTML = element.outerHTML.toString();\n  }\n\n  morph(toNode: string | Node, options?: MorphOptions) {\n    morphdom(this.element, toNode, options);\n  }\n\n  restore() {\n    if (this.originalHTML) {\n      morphdom(this.element, this.originalHTML);\n    }\n  }\n}\n"],"names":["Morphel","element","this","originalHTML","outerHTML","toString","_proto","prototype","morph","toNode","options","morphdom","restore","key","get"],"mappings":"8KA0BE,SAAAA,EAAYC,GACVC,KAAKD,QAAUA,EACfC,KAAKC,aAAeF,EAAQG,UAAUC,WACvC,QAAAC,EAAAN,EAAAO,UALA,OAKAD,EAEDE,MAAA,SAAMC,EAAuBC,GAC3BC,EAAST,KAAKD,QAASQ,EAAQC,IAChCJ,EAEDM,QAAA,WACMV,KAAKC,cACPQ,EAAST,KAAKD,QAASC,KAAKC,iBAE/BH,OAAAa,SAAAC,IAjBD,WACE,OAAOZ,KAAKD,0gBACbD"}